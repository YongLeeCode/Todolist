"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/items/[id]",{

/***/ "./src/model/handler.ts":
/*!******************************!*\
  !*** ./src/model/handler.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPostHandler: function() { return /* binding */ addPostHandler; },\n/* harmony export */   fetchPostHandler: function() { return /* binding */ fetchPostHandler; },\n/* harmony export */   fetchPostsHandler: function() { return /* binding */ fetchPostsHandler; },\n/* harmony export */   handleChange: function() { return /* binding */ handleChange; }\n/* harmony export */ });\nconst baseURL = \"https://assignment-todolist-api.vercel.app/api\";\n//read all\nasync function fetchPostsHandler() {\n    try {\n        const response = await fetch(\"\".concat(baseURL, \"/yong/items\"), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"데이터 가져오기 실패\");\n        }\n        const data = await response.json();\n        console.log(\"할 일 목록:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"오류 발생:\", error);\n        alert(\"할 일 목록을 불러오는 데 실패했습니다.\");\n    }\n}\n// read one\nasync function fetchPostHandler(id) {\n    try {\n        const response = await fetch(\"\".concat(baseURL, \"/yong/items/\").concat(id), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"데이터 가져오기 실패\");\n        }\n        const data = await response.json();\n        console.log(\"할 일:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"오류 발생:\", error);\n        alert(\"할 일 목록을 불러오는 데 실패했습니다.\");\n    }\n}\n// patch one\nconst handleChange = async (id, updatedPost)=>{\n    try {\n        const response = await fetch(\"\".concat(baseURL, \"/yong/items/\").concat(id), {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(updated)\n        });\n        if (!response.ok) {\n            throw new Error(\"업데이트 실패\");\n        }\n        console.log(\"업데이트 성공:\", updatedStatus);\n    } catch (error) {\n        console.error(\"오류 발생:\", error);\n        alert(\"상태 업데이트에 실패했습니다.\");\n    }\n};\n//new post\nasync function addPostHandler(postName, setPost, setPostName) {\n    if (postName.trim() === \"\") {\n        alert(\"할 일을 입력해주세요!\");\n        return;\n    }\n    try {\n        const response = await fetch(\"\".concat(baseURL, \"/yong/items\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                name: postName\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"데이터 전송 실패\");\n        }\n        const newPost = await response.json();\n        setPost((prevPosts)=>[\n                ...prevPosts,\n                newPost\n            ]);\n        setPostName(\"\");\n        console.log(\"할 일 추가 성공:\", newPost);\n        window.location.reload();\n    } catch (error) {\n        console.error(\"오류 발생:\", error);\n        alert(\"할 일 추가에 실패했습니다.\");\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kZWwvaGFuZGxlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsVUFBVUMsZ0RBQWdDO0FBRWhELFVBQVU7QUFDSCxlQUFlRztJQUNwQixJQUFJO1FBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLEdBQVcsT0FBUk4sU0FBUSxnQkFBYztZQUNwRE8sUUFBUTtZQUNSQyxTQUFTO2dCQUNQLGdCQUFnQjtZQUNsQjtRQUNGO1FBRUEsSUFBSSxDQUFDSCxTQUFTSSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBQ0EsTUFBTUMsT0FBTyxNQUFNTixTQUFTTyxJQUFJO1FBQ2hDQyxRQUFRQyxHQUFHLENBQUMsV0FBV0g7UUFDdkIsT0FBT0E7SUFDVCxFQUFFLE9BQU9JLE9BQU87UUFDZEYsUUFBUUUsS0FBSyxDQUFDLFVBQVVBO1FBQ3hCQyxNQUFNO0lBQ1I7QUFDRjtBQUVBLFdBQVc7QUFDSixlQUFlQyxpQkFBaUJDLEVBQVU7SUFDL0MsSUFBSTtRQUNGLE1BQU1iLFdBQVcsTUFBTUMsTUFBTSxHQUF5QlksT0FBdEJsQixTQUFRLGdCQUFpQixPQUFIa0IsS0FBTTtZQUMxRFgsUUFBUTtZQUNSQyxTQUFTO2dCQUNQLGdCQUFnQjtZQUNsQjtRQUNGO1FBRUEsSUFBSSxDQUFDSCxTQUFTSSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBRUEsTUFBTUMsT0FBTyxNQUFNTixTQUFTTyxJQUFJO1FBQ2hDQyxRQUFRQyxHQUFHLENBQUMsUUFBUUg7UUFDcEIsT0FBT0E7SUFFVCxFQUFFLE9BQU9JLE9BQU87UUFDZEYsUUFBUUUsS0FBSyxDQUFDLFVBQVVBO1FBQ3hCQyxNQUFNO0lBQ1I7QUFDRjtBQUdBLFlBQVk7QUFDTCxNQUFNRyxlQUFlLE9BQU9ELElBQVlFO0lBQzdDLElBQUk7UUFDRixNQUFNZixXQUFXLE1BQU1DLE1BQU0sR0FBeUJZLE9BQXRCbEIsU0FBUSxnQkFBaUIsT0FBSGtCLEtBQU07WUFDMURYLFFBQVE7WUFDUkMsU0FBUztnQkFDUCxnQkFBZ0I7WUFDbEI7WUFDQWEsTUFBTUMsS0FBS0MsU0FBUyxDQUFDQztRQUN2QjtRQUVBLElBQUksQ0FBQ25CLFNBQVNJLEVBQUUsRUFBRTtZQUNoQixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFDQUcsUUFBUUMsR0FBRyxDQUFDLFlBQVlXO0lBRzFCLEVBQUUsT0FBT1YsT0FBTztRQUNkRixRQUFRRSxLQUFLLENBQUMsVUFBVUE7UUFDeEJDLE1BQU07SUFDUjtBQUNGLEVBQUU7QUFFRixVQUFVO0FBQ0gsZUFBZVUsZUFBZUMsUUFBZ0IsRUFBRUMsT0FBWSxFQUFFQyxXQUFnQjtJQUNuRixJQUFJRixTQUFTRyxJQUFJLE9BQU8sSUFBSTtRQUMxQmQsTUFBTTtRQUNOO0lBQ0Y7SUFFQSxJQUFJO1FBQ0YsTUFBTVgsV0FBVyxNQUFNQyxNQUFNLEdBQVcsT0FBUk4sU0FBUSxnQkFBYztZQUNwRE8sUUFBUTtZQUNSYyxNQUFNQyxLQUFLQyxTQUFTLENBQUM7Z0JBQUVRLE1BQU1KO1lBQVM7WUFDdENuQixTQUFTO2dCQUNQLGdCQUFnQjtZQUNsQjtRQUNGO1FBRUEsSUFBSSxDQUFDSCxTQUFTSSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBRUEsTUFBTXNCLFVBQVUsTUFBTTNCLFNBQVNPLElBQUk7UUFDbkNnQixRQUFRLENBQUNLLFlBQWM7bUJBQUlBO2dCQUFXRDthQUFRO1FBQzlDSCxZQUFZO1FBQ1poQixRQUFRQyxHQUFHLENBQUMsY0FBY2tCO1FBQzFCRSxPQUFPQyxRQUFRLENBQUNDLE1BQU07SUFDeEIsRUFBRSxPQUFPckIsT0FBTztRQUNkRixRQUFRRSxLQUFLLENBQUMsVUFBVUE7UUFDeEJDLE1BQU07SUFDUjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9tb2RlbC9oYW5kbGVyLnRzPzI4NjIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYmFzZVVSTCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBU0VfVVJMO1xuXG4vL3JlYWQgYWxsXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hQb3N0c0hhbmRsZXIoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtiYXNlVVJMfS95b25nL2l0ZW1zYCwge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCLrjbDsnbTthLAg6rCA7KC47Jik6riwIOyLpO2MqFwiKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBjb25zb2xlLmxvZyhcIu2VoCDsnbwg66qp66GdOlwiLCBkYXRhKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwi7Jik66WYIOuwnOyDnTpcIiwgZXJyb3IpO1xuICAgIGFsZXJ0KFwi7ZWgIOydvCDrqqnroZ3snYQg67aI65+s7Jik64qUIOuNsCDsi6TtjKjtlojsirXri4jri6QuXCIpO1xuICB9XG59XG5cbi8vIHJlYWQgb25lXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hQb3N0SGFuZGxlcihpZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtiYXNlVVJMfS95b25nL2l0ZW1zLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCLrjbDsnbTthLAg6rCA7KC47Jik6riwIOyLpO2MqFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGNvbnNvbGUubG9nKFwi7ZWgIOydvDpcIiwgZGF0YSk7XG4gICAgcmV0dXJuIGRhdGE7IFxuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCLsmKTrpZgg67Cc7IOdOlwiLCBlcnJvcik7XG4gICAgYWxlcnQoXCLtlaAg7J28IOuqqeuhneydhCDrtojrn6zsmKTripQg642wIOyLpO2MqO2WiOyKteuLiOuLpC5cIik7XG4gIH1cbn1cblxuXG4vLyBwYXRjaCBvbmVcbmV4cG9ydCBjb25zdCBoYW5kbGVDaGFuZ2UgPSBhc3luYyAoaWQ6IHN0cmluZywgdXBkYXRlZFBvc3QpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2Jhc2VVUkx9L3lvbmcvaXRlbXMvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHVwZGF0ZWQpXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCLsl4XrjbDsnbTtirgg7Iuk7YyoXCIpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIuyXheuNsOydtO2KuCDshLHqs7U6XCIsIHVwZGF0ZWRTdGF0dXMpO1xuICAgIFxuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCLsmKTrpZgg67Cc7IOdOlwiLCBlcnJvcik7XG4gICAgYWxlcnQoXCLsg4Htg5wg7JeF642w7J207Yq47JeQIOyLpO2MqO2WiOyKteuLiOuLpC5cIik7XG4gIH1cbn07XG5cbi8vbmV3IHBvc3RcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRQb3N0SGFuZGxlcihwb3N0TmFtZTogc3RyaW5nLCBzZXRQb3N0OiBhbnksIHNldFBvc3ROYW1lOiBhbnkpIHtcbiAgaWYgKHBvc3ROYW1lLnRyaW0oKSA9PT0gXCJcIikge1xuICAgIGFsZXJ0KFwi7ZWgIOydvOydhCDsnoXroKXtlbTso7zshLjsmpQhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtiYXNlVVJMfS95b25nL2l0ZW1zYCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbmFtZTogcG9zdE5hbWUgfSksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIuuNsOydtO2EsCDsoITshqEg7Iuk7YyoXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1Bvc3QgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgc2V0UG9zdCgocHJldlBvc3RzKSA9PiBbLi4ucHJldlBvc3RzLCBuZXdQb3N0XSk7XG4gICAgc2V0UG9zdE5hbWUoXCJcIik7IFxuICAgIGNvbnNvbGUubG9nKFwi7ZWgIOydvCDstpTqsIAg7ISx6rO1OlwiLCBuZXdQb3N0KTtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIuyYpOulmCDrsJzsg506XCIsIGVycm9yKTtcbiAgICBhbGVydChcIu2VoCDsnbwg7LaU6rCA7JeQIOyLpO2MqO2WiOyKteuLiOuLpC5cIik7XG4gIH1cbn0iXSwibmFtZXMiOlsiYmFzZVVSTCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19CQVNFX1VSTCIsImZldGNoUG9zdHNIYW5kbGVyIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsIkVycm9yIiwiZGF0YSIsImpzb24iLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJhbGVydCIsImZldGNoUG9zdEhhbmRsZXIiLCJpZCIsImhhbmRsZUNoYW5nZSIsInVwZGF0ZWRQb3N0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVkIiwidXBkYXRlZFN0YXR1cyIsImFkZFBvc3RIYW5kbGVyIiwicG9zdE5hbWUiLCJzZXRQb3N0Iiwic2V0UG9zdE5hbWUiLCJ0cmltIiwibmFtZSIsIm5ld1Bvc3QiLCJwcmV2UG9zdHMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/model/handler.ts\n"));

/***/ })

});